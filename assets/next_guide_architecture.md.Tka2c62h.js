import{_ as a,D as o,o as r,c as i,I as s,w as n,m as e,a as l,U as h}from"./chunks/framework.9RURDSnp.js";const c="/assets/basics.excalidraw.DyLeF5JN.png",_=JSON.parse('{"title":"Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"next/guide/architecture.md","filePath":"next/guide/architecture.md"}'),d={name:"next/guide/architecture.md"},u=e("h1",{id:"architecture",tabindex:"-1"},[l("Architecture "),e("a",{class:"header-anchor",href:"#architecture","aria-label":'Permalink to "Architecture"'},"​")],-1),p=e("img",{alt:"Architecture Diagram",src:c},null,-1),m=h('<p>A <strong>Shulker Cluster</strong> is composed of three main <em>entities</em>:</p><ol><li>The <strong>Cluster</strong>, represented by the <code>MinecraftCluster</code> CRD (in purple in the diagram above) is the primary entity defining some global settings of the cluster. At least one is mandatory as most CRDs will requires you to provide the name of the <strong>Cluster</strong> to attach to.</li><li>The <strong>Proxy</strong>, represented by the <code>ProxyFleet</code> CRD (in orange in the diagram above) is an entrypoint for the players to connect to. A proxy will initiate connections to the <strong>Servers</strong>.</li><li>The <strong>Server</strong>, represented by the <code>MinecraftServerFleet</code> CRD (in green in the diagram above) is a Minecraft Server by itself. They are ephemeral and don&#39;t have any persistent storage. They should be destroyed and created on demand.</li></ol><p>You&#39;ll notice the responsability of launching the actual containers is delegated to <strong><a href="https://agones.dev/site/" target="_blank" rel="noreferrer">Agones</a></strong>. Agones is a Kubernetes Controller created and maintained by Google whose objective if to <em>Host, Run and Scale dedicated game servers on Kubernetes</em>. Shulker rely on Agones to handle the scheduling and resiliency part while handling itself the Agones recipes.</p><h2 id="what-is-exactly-a-cluster" tabindex="-1">What is exactly a Cluster? <a class="header-anchor" href="#what-is-exactly-a-cluster" aria-label="Permalink to &quot;What is exactly a Cluster?&quot;">​</a></h2><p>A <strong>Cluster</strong> (meaning the <code>MinecraftCluster</code> CRD), is the root entity of a Minecraft Network: every proxy and server needs one to attach to. It could define global settings multiple sub-entities may need.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>From a Kubernetes point-of-view, you can have multiple Clusters in a same <strong>Kubernetes Namespace</strong>.</p><p>While it is possible, it will make harder to distinguish which resource is owned by which cluster and could go as far as causing issues if some clusters are fighting for the same resource (if two clusters want to have the same secret name, for instance).</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Currently, the <code>MinecraftCluster</code> do not do much things, however it is planned in the future to let it manage a <strong>Limbo mechanism</strong>. A Limbo is a piece of software emulating a Minecraft Server without any game logic. Its only purpose is to keep the player connected to the Network while having an almost-zero performance impact.</p></div><h2 id="keeping-the-proxies-up-to-date" tabindex="-1">Keeping the proxies up-to-date <a class="header-anchor" href="#keeping-the-proxies-up-to-date" aria-label="Permalink to &quot;Keeping the proxies up-to-date&quot;">​</a></h2><h3 id="have-an-up-to-date-list-of-servers" tabindex="-1">Have an up-to-date list of servers <a class="header-anchor" href="#have-an-up-to-date-list-of-servers" aria-label="Permalink to &quot;Have an up-to-date list of servers&quot;">​</a></h3><p>One of the core requirements of Shulker is to keep the proxies up-to-date about all the creation and deletion of servers. This is usually done manually using the following flow:</p><ol><li>A Minecraft server is started with a custom plugin</li><li>When the Minecraft server is ready, the custom plugin will contact all the proxies for them to <strong>add</strong> <em>you</em> in their server list</li><li>When a player will want to connect to the new server, the proxy will already know it and establish the connection</li><li>When the Minecraft server is shutting down, the same custom plugin will contact all the proxies for them to <strong>remove</strong> <em>you</em> form their server list</li></ol><p>While this could <em>easily</em> be done by you with custom development, you&#39;ll still have to: create a custom plugin for this purpose, figure out how to broadcast the information to all the proxies, have a way of retrieving the IP address the proxy should use to connect players to the server, have a recovery mechanism to handle crashed servers that may not have informed proxies to remove them for their list.</p><p>Shulker, through Kubernetes, knows every proxy and every server along with their availability. Supported by a plugin agent to be installed on every proxy, the proxies will have their server list updated immediately upon every event occurring in the Kubernetes Cluster.</p><h3 id="have-a-shared-list-of-connected-players" tabindex="-1">Have a shared list of connected players <a class="header-anchor" href="#have-a-shared-list-of-connected-players" aria-label="Permalink to &quot;Have a shared list of connected players&quot;">​</a></h3><p>If you want to work with multiple proxies, mostly to ensure high availability of the cluster, you&#39;ll face the challenges of state sharing. Every proxy is fundamentally independant, and thus, is not aware that:</p><ol><li>It way not be the only proxy in the cluster</li><li>Players may be connected to other proxies</li></ol><p>This could create weird situations where a player may want to communicate with another player in a different proxy, but these two proxies being unable to proceed because they are not aware that the other player is actually connected to the cluster.</p><p>To solve this problem, Shulker has a built-in proxy synchronization layer based on Redis that is enabled automatically. This will provide some administrative commands to the proxy to ease player management (TODO ADD PAGE ABOUT COMMANDS), but also some useful details like showing the total amount of players in all proxies when pinging your cluster.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>While Shulker provides a managed single-node Redis by default when creating a cluster, it is not advised to use it in production as there will be no high availability nor any availability guarantee. It is only meant to be used when testing Shulker or at least on staging infrastructure where availability is not a critical requirement.</p></div><h2 id="proxy-and-server-extensibility" tabindex="-1">Proxy and Server extensibility <a class="header-anchor" href="#proxy-and-server-extensibility" aria-label="Permalink to &quot;Proxy and Server extensibility&quot;">​</a></h2><p>Shulker is only useful if it allows you to configure your proxies and servers freely. For the servers, this means that you should have a way of configuring anything from the game mode to the map to download on startup, like you would do manually by managing all the servers yourself.</p><p>In the background, we use the Docker images of <strong><a href="https://github.com/itzg" target="_blank" rel="noreferrer">itzg</a></strong>, an open-source developer which has developed Docker images for Minecraft proxies and servers. These images will handle automatically the software download (like fetching automatically your favorite Bukkit or BungeeCord version) while the configuration is solely managed by Shulker.</p><p>See the appropriate <strong>Recipes</strong> of this documentation to know what could be configured.</p>',23);function g(y,f,v,b,w,x){const t=o("center");return r(),i("div",null,[u,s(t,null,{default:n(()=>[p]),_:1}),m])}const S=a(d,[["render",g]]);export{_ as __pageData,S as default};
